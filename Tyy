import pandas as pd
import json
import re
from pathlib import Path
import importlib.util

STM_FILE = "Nongm.xlsx"
JSON_FILE = "Nongm.json"
UTILS_FILE = "utils.py"

def load_utils():
    spec = importlib.util.spec_from_file_location("utils", UTILS_FILE)
    utils = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(utils)
    return utils

def predict(transformation: str):
    t = transformation.lower()
    if "drop" in t or "remove" in t:
        return {"type": "drop", "params": {}}
    if "first" in t:
        m = re.search(r"first\s+(\d+)", t)
        if m:
            return {"type": "substring", "params": {"length": int(m.group(1))}}
    if "decimal" in t:
        m = re.search(r"(\d+)\s*decimal", t)
        if m:
            return {"type": "round_decimal", "params": {"places": int(m.group(1))}}
    if "mask" in t:
        return {"type": "mask", "params": {"visible": 4}}
    return {"type": "unknown", "params": {"raw": transformation}}

def validate(rule, utils):
    fn_type = rule["type"]
    if fn_type == "drop":
        return True
    if fn_type == "substring":
        return hasattr(utils, "substring") or hasattr(utils, "substr")
    if fn_type == "round_decimal":
        return hasattr(utils, "round_decimal") or hasattr(utils, "decimal_round")
    if fn_type == "mask":
        return hasattr(utils, "mask") or hasattr(utils, "mask_pan")
    return False

def main():
    df = pd.read_excel(STM_FILE)
    utils = load_utils()

    new_rules = []

    for idx, row in df.iterrows():
        trans = str(row["Transformation"])
        pred = predict(trans)
        pred["valid"] = validate(pred, utils)

        new_rules.append({
            "row": int(idx),
            "input": row["Input column name"],
            "target": row["Target column name"],
            "transformation": trans,
            "rule": pred
        })

    with open(JSON_FILE, "r", encoding="utf-8") as f:
        original_json = json.load(f)

    # Backup
    Path(JSON_FILE).with_suffix(".json.bak").write_text(
        json.dumps(original_json, indent=2)
    )

    # Replace rules
    original_json["rules"] = new_rules

    with open(JSON_FILE, "w", encoding="utf-8") as f:
        json.dump(original_json, f, indent=2)

    print("âœ… JSON updated successfully!")
    print(f"Backup created: {JSON_FILE}.bak")

if __name__ == "__main__":
    main()