import csv
from jenkinsapi.jenkins import Jenkins

# Replace with your Jenkins server URL and credentials
jenkins_url = 'http://your-jenkins-server'
username = 'your-username'
password = 'your-password'

def get_jenkins_instance(url, user, pwd):
    return Jenkins(url, username=user, password=pwd)

def fetch_job_data(jenkins):
    job_data = []

    for job_name, job_instance in jenkins.get_jobs_recursive():
        job_info = job_instance._data
        last_build = job_instance.get_last_build_or_none()
        last_build_info = last_build.get_data() if last_build else {}
        
        job_data.append({
            'Job Name': job_name,
            'Last Run User': last_build_info.get('actions', [{}])[0].get('causes', [{}])[0].get('userId', 'N/A'),
            'Last Run Time': last_build_info.get('timestamp', 'N/A'),
            'Enabled': not job_instance.is_disabled()
        })

    return job_data

def save_to_csv(data, filename='jenkins_jobs.csv'):
    keys = data[0].keys() if data else ['Job Name', 'Last Run User', 'Last Run Time', 'Enabled']
    with open(filename, 'w', newline='') as output_file:
        dict_writer = csv.DictWriter(output_file, fieldnames=keys)
        dict_writer.writeheader()
        dict_writer.writerows(data)

def main():
    jenkins = get_jenkins_instance(jenkins_url, username, password)
    job_data = fetch_job_data(jenkins)
    save_to_csv(job_data)

if __name__ == '__main__':
    main()






import csv
import requests
import jenkins
from requests.auth import HTTPBasicAuth

# Replace with your Jenkins server URL and credentials
jenkins_url = 'http://your-jenkins-server'
username = 'your-username'
password = 'your-password'

def get_jenkins_instance(url, user, pwd):
    return jenkins.Jenkins(url, username=user, password=pwd)

def fetch_job_data(jenkins_server):
    job_data = []

    def get_all_jobs(jenkins_server, folder=''):
        jobs = jenkins_server.get_jobs(folder_depth=2)
        for job in jobs:
            job_name = job['name']
            job_full_name = job['fullname']
            if job['_class'] == 'com.cloudbees.hudson.plugins.folder.Folder':
                get_all_jobs(jenkins_server, job_full_name)
            else:
                job_info = jenkins_server.get_job_info(job_full_name)
                last_build_number = job_info['lastBuild']['number'] if job_info['lastBuild'] else None
                if last_build_number:
                    last_build_info = jenkins_server.get_build_info(job_full_name, last_build_number)
                    last_run_user = next((action.get('userId', 'N/A') for action in last_build_info['actions'] if 'userId' in action), 'N/A')
                    last_run_time = last_build_info['timestamp']
                else:
                    last_run_user = 'N/A'
                    last_run_time = 'N/A'

                job_data.append({
                    'Job Name': job_full_name,
                    'Last Run User': last_run_user,
                    'Last Run Time': last_run_time,
                    'Enabled': not job_info['buildable']
                })

    get_all_jobs(jenkins_server)
    return job_data

def save_to_csv(data, filename='jenkins_jobs.csv'):
    keys = data[0].keys() if data else ['Job Name', 'Last Run User', 'Last Run Time', 'Enabled']
    with open(filename, 'w', newline='') as output_file:
        dict_writer = csv.DictWriter(output_file, fieldnames=keys)
        dict_writer.writeheader()
        dict_writer.writerows(data)

def main():
    jenkins_server = get_jenkins_instance(jenkins_url, username, password)
    job_data = fetch_job_data(jenkins_server)
    save_to_csv(job_data)
