
from google.cloud import bigquery_reservation
import datetime
import json
import time

# Load configuration
with open("reservations_config.json", "r") as config_file:
    config = json.load(config_file)

# Initialize BigQuery Reservation client
client = bigquery_reservation.ReservationServiceClient()

def adjust_slots():
    current_time = datetime.datetime.now().strftime("%H:%M")
    for reservation in config["reservations"]:
        reservation_name = reservation["name"]
        default_slots = reservation.get("default_slots", 100)
        adjusted = False

        for time_slot in reservation["time_slots"]:
            if time_slot["start"] <= current_time <= time_slot["end"]:
                min_slots = time_slot["min_slots"]
                max_slots = time_slot["max_slots"]

                # Fetch current reservation details
                reservation_path = f"projects/{project_id}/locations/{region}/reservations/{reservation_name}"
                reservation_details = client.get_reservation(name=reservation_path)

                current_slots = reservation_details.slot_capacity

                # Adjust slots if needed
                if current_slots < min_slots:
                    client.update_reservation(
                        bigquery_reservation.UpdateReservationRequest(
                            reservation={
                                "name": reservation_path,
                                "slot_capacity": min_slots,
                            }
                        )
                    )
                    print(f"Increased slots for {reservation_name} to {min_slots}")
                elif current_slots > max_slots:
                    client.update_reservation(
                        bigquery_reservation.UpdateReservationRequest(
                            reservation={
                                "name": reservation_path,
                                "slot_capacity": max_slots,
                            }
                        )
                    )
                    print(f"Decreased slots for {reservation_name} to {max_slots}")
                adjusted = True
                break

        if not adjusted:
            # Revert to default slots
            reservation_path = f"projects/{project_id}/locations/{region}/reservations/{reservation_name}"
            reservation_details = client.get_reservation(name=reservation_path)
            current_slots = reservation_details.slot_capacity

            if current_slots != default_slots:
                client.update_reservation(
                    bigquery_reservation.UpdateReservationRequest(
                        reservation={
                            "name": reservation_path,
                            "slot_capacity": default_slots,
                        }
                    )
                )
                print(f"Reverted slots for {reservation_name} to default: {default_slots}")

# Schedule the job
while True:
    adjust_slots()
    time.sleep(60)  # Run every 1 minute


import requests
from requests.auth import HTTPBasicAuth

# Jenkins credentials
JENKINS_URL = "http://jenkins.com"
JOB_PATH = "gdt02/job/gdtwpb/job/nebula/job/dev/job/globalplatform/job/ihub/job/master"
BUILD_NUMBER = "<BUILD_NUMBER>"   # Replace with the specific build number
USER = "<USERNAME>"               # Jenkins username
API_TOKEN = "<API_TOKEN>"         # Jenkins API token

# Action: 'doProceed' to deploy, 'doAbort' to abort
ACTION = "doProceed"   # Use 'doAbort' to abort

# Jenkins input endpoint URL for performing the action
url = f"{JENKINS_URL}/{JOB_PATH}/{BUILD_NUMBER}/input/{ACTION}"

# Send the POST request to Jenkins
response = requests.post(url, auth=HTTPBasicAuth(USER, API_TOKEN))

if response.status_code == 200:
    print(f"Successfully executed {ACTION} on the pipeline.")
else:
    print(f"Failed to execute {ACTION}. Status code: {response.status_code}")
    print(response.text)



pipeline {
    agent any
    stages {
        stage('Get PR Head Commit') {
            steps {
                script {
                    if (env.CHANGE_ID) {
                        echo "Building PR #${env.CHANGE_ID} targeting ${env.CHANGE_TARGET}"
                        
                        // Fetch the latest from the remote PR branch
                        sh 'git fetch origin +refs/pull/*/head:refs/remotes/origin/pr/*'

                        // Get the actual PR branch head commit
                        def prHeadCommit = sh(
                            script: 'git rev-parse origin/pr/' + env.CHANGE_ID,
                            returnStdout: true
                        ).trim()
                        
                        echo "PR Head Commit: ${prHeadCommit}"
                    } else {
                        echo "Not a Pull Request build."
                    }
                }
            }
        }
    }
}

pipeline {
    agent any
    stages {
        stage('Get PR Head Commit') {
            steps {
                script {
                    // Ensure you're on the correct PR branch
                    if (env.CHANGE_ID) {
                        echo "Building PR #${env.CHANGE_ID} targeting ${env.CHANGE_TARGET}"
                        def headCommit = sh(
                            script: 'git rev-parse HEAD',
                            returnStdout: true
                        ).trim()
                        echo "PR Head Commit: ${headCommit}"
                    } else {
                        echo "Not a Pull Request build."
                    }
                }
            }
        }
    }
}
