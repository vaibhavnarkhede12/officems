import subprocess
import json

# List of GCP project IDs
projects = [
    'your-project-id-1',
    'your-project-id-2',
    # Add more project IDs
]

def run_gcloud_cmd(cmd):
    try:
        output = subprocess.check_output(cmd, shell=True, text=True)
        return json.loads(output)
    except subprocess.CalledProcessError as e:
        print(f"Command failed: {cmd}\n{e}")
        return []

def get_instances(project):
    cmd = f"gcloud compute instances list --project={project} --format=json"
    return run_gcloud_cmd(cmd)

def get_instance_group_instances(project):
    cmd = f"gcloud compute instance-groups list --project={project} --format=json"
    mig_instances = set()

    groups = run_gcloud_cmd(cmd)
    for group in groups:
        if group.get("instanceGroupType") == "MANAGED":
            zone = group.get("zone", "").split("/")[-1]
            group_name = group["name"]
            cmd_detail = (
                f"gcloud compute instance-groups managed list-instances {group_name} "
                f"--zone={zone} --project={project} --format=json"
            )
            instances = run_gcloud_cmd(cmd_detail)
            for inst in instances:
                mig_instances.add(inst["instance"].split("/")[-1])

    return mig_instances

def find_non_mig_instances():
    for project in projects:
        print(f"\nüîç Project: {project}")
        all_instances = get_instances(project)
        mig_instance_names = get_instance_group_instances(project)

        for inst in all_instances:
            name = inst['name']
            zone = inst['zone'].split('/')[-1]
            if name not in mig_instance_names:
                print(f"‚û°Ô∏è  Non-MIG Instance: {name} (zone: {zone})")

if __name__ == "__main__":
    find_non_mig_instances()