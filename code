import re

# Sample input row (can come from a CSV, DB, etc.)
row = {
    "txncode": "17",
    "inputmedium": 99,
    "narrative1": "TTY",
    "amount": 500
}

# List of conditions: each is a dict with a column, operator, and expected value
conditions = [
    {"key": "txncode", "op": "==", "value": "17"},       # condition 0
    {"key": "amount", "op": "gt", "value": 100},         # condition 1
    {"key": "amount", "op": "lt", "value": 1000},        # condition 2
]

# Logical expression: combine conditions using their indices
expression = "0 AND (1 AND 2)"

# Function to evaluate a single condition against the row
def evaluate_condition(row, cond):
    val = row.get(cond["key"], "")
    op = cond["op"]
    match_val = cond["value"]

    try:
        if op == "==":
            return val == match_val
        elif op == "!=":
            return val != match_val
        elif op == "in":
            return val in match_val
        elif op == "notIn":
            return val not in match_val
        elif op == "startsWith":
            return str(val).startswith(str(match_val))
        elif op == "notStartsWith":
            return not str(val).startswith(str(match_val))
        elif op == "endsWith":
            return str(val).endswith(str(match_val))
        elif op == "regex":
            return bool(re.search(match_val, str(val)))
        elif op == "gt":
            return float(val) > float(match_val)
        elif op == "lt":
            return float(val) < float(match_val)
        elif op == "gte":
            return float(val) >= float(match_val)
        elif op == "lte":
            return float(val) <= float(match_val)
        else:
            raise ValueError(f"Unsupported op: {op}")
    except (ValueError, TypeError) as e:
        print(f"Error evaluating condition {cond}: {e}")
        return False

# Function to evaluate full expression
def evaluate_expression(row, conditions, expression):
    print("==== Evaluating Conditions ====")
    results = {}

    # Step 1: Evaluate all conditions and map them to results
    for idx, cond in enumerate(conditions):
        result = evaluate_condition(row, cond)
        results[str(idx)] = result
        print(f"Condition {idx}: {cond['key']} {cond['op']} {cond['value']} → {result}")

    # Step 2: Replace condition indices in the expression with their results
    expr_eval = expression
    print("\n==== Substituting Condition Results ====")
    for k, v in results.items():
        expr_eval = expr_eval.replace(k, str(v))
        print(f"Replaced {k} with {v} → {expr_eval}")

    # Step 3: Replace AND/OR with Python logical operators
    expr_eval = expr_eval.replace("AND", "and").replace("OR", "or")
    print(f"\nFinal expression to evaluate: {expr_eval}")

    # Step 4: Evaluate final expression using Python's eval
    final_result = eval(expr_eval)
    print(f"\n==== Final Result ====")
    print(f"Expression Result: {final_result}")
    return final_result

# Run evaluation
result = evaluate_expression(row, conditions, expression)
print("\nMatch Result:", result)
